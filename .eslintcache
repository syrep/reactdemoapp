[{"/home/joe/Documents/syrep Github/reactdemoapp/src/App.js":"1","/home/joe/Documents/syrep Github/reactdemoapp/src/index.js":"2","/home/joe/Documents/syrep Github/reactdemoapp/src/AxiosPart/Users.js":"3","/home/joe/Documents/syrep Github/reactdemoapp/src/AxiosPart/UsersModify.js":"4","/home/joe/Documents/syrep Github/reactdemoapp/src/FunctionalPart/Hello.js":"5","/home/joe/Documents/syrep Github/reactdemoapp/src/DynamicPart/Dynamic.js":"6","/home/joe/Documents/syrep Github/reactdemoapp/src/HooksPart/Hooks.js":"7","/home/joe/Documents/syrep Github/reactdemoapp/src/reportWebVitals.js":"8","/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/Redux.js":"9","/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/reducers/counter.js":"10","/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/reducers/combinedReducers.js":"11","/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/reducers/login.js":"12"},{"size":1770,"mtime":1607222192779,"results":"13","hashOfConfig":"14"},{"size":1072,"mtime":1607235713336,"results":"15","hashOfConfig":"14"},{"size":519,"mtime":1606636848035,"results":"16","hashOfConfig":"14"},{"size":826,"mtime":1606371913226,"results":"17","hashOfConfig":"14"},{"size":741,"mtime":1606629124559,"results":"18","hashOfConfig":"14"},{"size":3049,"mtime":1606643071383,"results":"19","hashOfConfig":"14"},{"size":7064,"mtime":1607221902308,"results":"20","hashOfConfig":"14"},{"size":362,"mtime":1606365824646,"results":"21","hashOfConfig":"14"},{"size":531,"mtime":1607235663636,"results":"22","hashOfConfig":"14"},{"size":237,"mtime":1607235348179,"results":"23","hashOfConfig":"14"},{"size":533,"mtime":1607234866912,"results":"24","hashOfConfig":"14"},{"size":291,"mtime":1607234347861,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"njlbo4",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/joe/Documents/syrep Github/reactdemoapp/src/App.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/index.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/AxiosPart/Users.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/AxiosPart/UsersModify.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/FunctionalPart/Hello.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/DynamicPart/Dynamic.js",["53"],"import React, { Component } from \"react\";\n\n//below is a list of users/entities that can be selected from\nconst dynuser = [\n\t{\n\t\tname: \"john\",\n\t\tage: \"17\",\n\t\tvideo: \"https://www.youtube.com/watch?v=1TYObnD0RCA\",\n\t},\n\t{\n\t\tname: \"john2\",\n\t\tage: \"72\",\n\t\tvideo: \"https://www.youtube.com/watch?v=6aPZR3qAIXg\",\n\t},\n\t{\n\t\tname: \"johnw\",\n\t\tage: \"47\",\n\t\tvideo: \"https://www.youtube.com/watch?v=Qqgm170PZwk\",\n\t},\n\t{\n\t\tname: \"state\",\n\t\tage: \"0\",\n\t\tvideo: \"https://stackoverflow.com/questions/57373072/state-is-not-defined\",\n\t},\n];\n\n//below is the class that contains state (functional class) and the render method which allows us to display the username, and links to what displays it\nexport default class DynUser extends Component {\n\tstate = {\n\t\tchosenDynUser: \"\",\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t//display the usernames if we want to from the comment block below\n\t\t\t<div>\n\t\t\t\t{/* {dynuser.map((user) => (\n\t\t\t\t\t<p key={user.name}>\n\t\t\t\t\t\tName: {user.name} Video: {user.video}\n\t\t\t\t\t</p>\n\t\t\t\t))} */}\n\t\t\t\t{this.selectDynUser()} {/* displays the select method */}\n\t\t\t\t{this.selectedDynUser(this.state.chosenDynUser)}\n\t\t\t\t{/* displays the selected information */}\n\t\t\t</div>\n\t\t);\n\t}\n\n\t/*below has the select method */\n\tselectDynUser() {\n\t\tconsole.log(this.state.chosenDynUser); //this logs what is currently selected to console\n\t\t//Please note that the state(chosenDynUser) is no longer an array, so it cannot be used to map and extract data\n\t\treturn (\n\t\t\t<select\n\t\t\t\tonChange={(e) => [this.setState({ chosenDynUser: e.target.value })]}\n\t\t\t>\n\t\t\t\t<option>Select a name for more information</option>\n\t\t\t\t{dynuser.map((user) => (\n\t\t\t\t\t<option key={user.name}>{user.name}</option>\n\t\t\t\t))}\n\t\t\t</select>\n\t\t);\n\t}\n\n\tselectedDynUser(chosenDynUser) {\n\t\tif (!chosenDynUser) return <p>No name is selected, please choose a name</p>;\n\n\t\t// need to convert state to string or something, then use it to get the row from the array\n\t\t//console.log(dynuser[3].name); //this is how you log what you select the index of the object (to get the right array) and then select the array component required\n\n\t\tconst samegs = chosenDynUser.toString();\n\t\t//console.log(\"name:\", { samegs });\n\n\t\tconst moreInfoDynUser = dynuser\n\t\t\t.filter((selectedUser) => selectedUser.name == samegs)\n\t\t\t.map((filteredName) => (\n\t\t\t\t<p key={filteredName}>\n\t\t\t\t\tName: {filteredName.name} <br /> Age: {filteredName.age} <br /> Video:{\" \"}\n\t\t\t\t\t<a href={filteredName.video}>Link</a>\n\t\t\t\t</p>\n\t\t\t));\n\n\t\treturn <span>{moreInfoDynUser}</span>;\n\t}\n}\n\n// https://stackoverflow.com/questions/63764175/key-value-pair-string-generation-out-of-an-array-react-js\n// the above link shows how to join array values together into specific formats\n\n// https://stackoverflow.com/questions/39270107/finding-an-object-in-array-and-taking-values-from-that-to-present-in-a-select-li\n// https://upmostly.com/tutorials/react-filter-filtering-arrays-in-react-with-examples\n// the above links are for filter & find within arrays\n\n// https://www.robinwieruch.de/react-state-array-add-update-remove\n// the above link helps conceptualize arrays\n","/home/joe/Documents/syrep Github/reactdemoapp/src/HooksPart/Hooks.js",["54","55","56"],"import { useState } from \"react\";\nimport \"./Hooks.css\";\n\n//first hook will be the mapping one, then need one that can be used as a boolean\n// https://www.youtube.com/watch?v=mxK8b99iJTg\n\n// https://www.youtube.com/watch?v=O6P86uwfdR0\n//for the hooks that are simple arrays\n\n//need a function component to use hook, classes use \"state\" instead\n//hooks need to execute in the same order, so we can't use if statements for them\n//usually we use a single hook per object in an array, but it really just depends on what you're doing\n// single hooks then let you do various different changes on a single/multiple event/s, making the data truely uniquely modifiable\nexport function HooksFunc() {\n  const [countState, setCountState] = useState(() => {\n    return 0;\n  });\n  //default value is placed in the useState brackets, it is an array\n  //can also use simple version such as \"useState(0);\" which can be slower in complicated states, and you can replace 0 with\n  // another function, which means that it will run that external function every time\n  //the expanded function version only runs once at the start, hence why it is used in complicated states\n\n  function increaseCount() {\n    //setCountState(countState + 1);\n    //this way shouldn't be used, as if it were to be repeated, it would use the old countState because the function\n    // hasn't finished, so the state doesn't appear changed. It would then be the same equation and answer\n\n    setCountState((oldCount) => oldCount + 1);\n    //this allows you to re-render the function, in the event you need to call the setCountState function again\n    //this uses the function method of setting state, similar to classes, as it passes in the state object as a number\n    // then updates it, so when the next setCountState tries to run, it uses the updated number\n  }\n\n  function decreaseCount() {\n    setCountState((oldCount) => oldCount - 1);\n  }\n\n  const [arrayState, setArrayState] = useState({ number: 12, letter: \"f\" });\n  const number = arrayState.number;\n  const letter = arrayState.letter;\n  //in this example, we are using an array of data, so the method to play with state will be different\n\n  function increaseNumber() {\n    setArrayState((oldArray) => {\n      return { number: oldArray.number + 1, letter: oldArray.letter };\n      //this returns an array, with the updated value of number, and does math by pulling the old value of number from the\n      // old array, then it proceeds to add \"1\" to it. Letter must be included, or it gets \"dropped\" from the state\n\n      //in function based components, we need to add letter. But in class based states, we don't need to include it\n      // as it only writes to the thing being modified. Class components get everything merged, functions just overwrite\n\n      //To overcome this, we can also \"spread\" out all of the code, which you can see in the decreaseNumber\n    });\n  }\n\n  function decreaseNumber() {\n    setArrayState((oldArray) => {\n      return { ...oldArray, number: oldArray.number - 1 };\n      //This spreads out all of the old array data to be written out to again, then modifies the value we explicitly supply\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={increaseCount}>Up</button>\n      <span className=\"counter\">{countState}</span>\n      <button onClick={decreaseCount}>Down</button>\n      <div className=\"spacer\">\n        <button onClick={increaseNumber}>Up Number</button>\n        <span className=\"counter\">\n          {number}, {letter}\n        </span>\n        <button onClick={decreaseNumber}>Down Number</button>\n      </div>\n    </div>\n  );\n}\n\n/// the below is where the modifiable useState stuff is done. It is independant of the stuff above\n/// this is really annoying to figure out\n/// it has some changes and explanations that were not in the videos, so it was a good learning exercise\n\nfunction ListItem({ item, index, modifyArray, deleteArray }) {\n  return (\n    <li\n      style={{ textDecoration: item.isModified ? \"line-through\" : \"\" }}\n      className=\"list-item\"\n    >\n      {item.text}\n      <button onClick={() => modifyArray(index)}>Modify</button>\n      <button onClick={() => deleteArray(index)}>Delete</button>\n    </li>\n  );\n  //text decoration is based on a ternary? statement, basically the syntax is \"if XYZ ? true=action : else=action\"\n  // in this specific case\n}\n\nfunction AddListItem({ addItem }) {\n  const [newItem, setNewItem] = useState(\"\");\n\n  const handleAdd = (e) => {\n    e.preventDefault();\n    if (!newItem) return;\n    addItem(newItem);\n    setNewItem(\"\");\n  };\n\n  return (\n    <form onSubmit={handleAdd}>\n      <input\n        type=\"text\"\n        value={newItem}\n        placeholder=\"add new item\"\n        onChange={(e) => setNewItem(e.target.value)}\n      ></input>\n    </form>\n  );\n}\n\nexport function HookComp() {\n  const [arrayList, setArrayList] = useState([\n    {\n      text: \"first item\",\n      isModified: false,\n    },\n    {\n      text: \"second item\",\n      isModified: true,\n    },\n    {\n      text: \"third item\",\n      isModified: false,\n    },\n  ]);\n\n  const addItem = (text) => {\n    const newValues = [...arrayList, { text }];\n    setArrayList(newValues);\n  };\n\n  const modifyArray = (index) => {\n    const newValues = [...arrayList];\n    //newValues[index].isModified = true;\n    //setArrayList(newValues);\n\n    //the commented out way would only work for strike-through, but the way below allows for undoing the change\n    if (newValues[index].isModified) {\n      return (newValues[index].isModified = false), setArrayList(newValues);\n    }\n    {\n      return (newValues[index].isModified = true), setArrayList(newValues);\n    }\n    //this if statement works by assessing if the isModified == true, then sets it to false, else it sets it true\n    //we need to call the setState function within the block otherwise it can't access the changed value\n  };\n\n  const deleteArray = (index) => {\n    ///const newValues = [...arrayList];\n    ///newValues.splice(index, 1);\n    //puts \"cursor\" at index, then splices 1 position. Look it up for more information if needed.\n\n    ///setArrayList(newValues);\n    // the triple slash comments are what was previously there, but the new filter method does not mutate the array\n\n    const deletedItem = Array.from(arrayList.filter((items, i) => i !== index));\n    //the filter can take in the callback function with the array (items) and the index (i), then we\n    // are checking if the index does not equal the index of the item we are deleting, so we can exclude\n    // it from the new array. After that, we set state equal to this new array (non-mutated)\n    setArrayList(deletedItem);\n  };\n\n  return (\n    <div className=\"comp-container\">\n      <div className=\"array-list\">\n        <ul>\n          {arrayList.map((item, index) => (\n            <ListItem\n              key={index}\n              index={index}\n              item={item}\n              modifyArray={modifyArray}\n              deleteArray={deleteArray}\n            />\n          ))}\n          <AddListItem addItem={addItem} />\n        </ul>\n      </div>\n    </div>\n  );\n}\n",["57","58"],"/home/joe/Documents/syrep Github/reactdemoapp/src/reportWebVitals.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/Redux.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/reducers/counter.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/reducers/combinedReducers.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/reducers/login.js",[],{"ruleId":"59","severity":1,"message":"60","line":75,"column":48,"nodeType":"61","messageId":"62","endLine":75,"endColumn":50},{"ruleId":"63","severity":1,"message":"64","line":148,"column":51,"nodeType":"65","messageId":"66","endLine":148,"endColumn":52},{"ruleId":"67","severity":1,"message":"68","line":150,"column":5,"nodeType":"69","messageId":"70","endLine":152,"endColumn":6},{"ruleId":"63","severity":1,"message":"64","line":151,"column":50,"nodeType":"65","messageId":"66","endLine":151,"endColumn":51},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-global-assign","no-unsafe-negation"]