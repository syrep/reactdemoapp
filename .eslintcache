[{"/home/joe/Documents/syrep Github/reactdemoapp/src/App.js":"1","/home/joe/Documents/syrep Github/reactdemoapp/src/index.js":"2","/home/joe/Documents/syrep Github/reactdemoapp/src/AxiosPart/Users.js":"3","/home/joe/Documents/syrep Github/reactdemoapp/src/AxiosPart/UsersModify.js":"4","/home/joe/Documents/syrep Github/reactdemoapp/src/FunctionalPart/Hello.js":"5","/home/joe/Documents/syrep Github/reactdemoapp/src/DynamicPart/Dynamic.js":"6","/home/joe/Documents/syrep Github/reactdemoapp/src/HooksPart/Hooks.js":"7","/home/joe/Documents/syrep Github/reactdemoapp/src/reportWebVitals.js":"8","/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/Redux.js":"9","/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/reducers/counter.js":"10","/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/reducers/combinedReducers.js":"11","/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/reducers/login.js":"12","/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/actions/counterAction.js":"13","/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/actions/loginAction.js":"14"},{"size":1770,"mtime":1607222192779,"results":"15","hashOfConfig":"16"},{"size":1072,"mtime":1607235713336,"results":"17","hashOfConfig":"16"},{"size":519,"mtime":1606636848035,"results":"18","hashOfConfig":"16"},{"size":826,"mtime":1606371913226,"results":"19","hashOfConfig":"16"},{"size":741,"mtime":1606629124559,"results":"20","hashOfConfig":"16"},{"size":3204,"mtime":1607237096856,"results":"21","hashOfConfig":"16"},{"size":7064,"mtime":1607221902308,"results":"22","hashOfConfig":"16"},{"size":362,"mtime":1606365824646,"results":"23","hashOfConfig":"16"},{"size":1360,"mtime":1607236994712,"results":"24","hashOfConfig":"16"},{"size":237,"mtime":1607235348179,"results":"25","hashOfConfig":"16"},{"size":533,"mtime":1607234866912,"results":"26","hashOfConfig":"16"},{"size":291,"mtime":1607234347861,"results":"27","hashOfConfig":"16"},{"size":425,"mtime":1607236077697,"results":"28","hashOfConfig":"16"},{"size":136,"mtime":1607236877402,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"njlbo4",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/joe/Documents/syrep Github/reactdemoapp/src/App.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/index.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/AxiosPart/Users.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/AxiosPart/UsersModify.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/FunctionalPart/Hello.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/DynamicPart/Dynamic.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/HooksPart/Hooks.js",["60","61","62"],"import { useState } from \"react\";\nimport \"./Hooks.css\";\n\n//first hook will be the mapping one, then need one that can be used as a boolean\n// https://www.youtube.com/watch?v=mxK8b99iJTg\n\n// https://www.youtube.com/watch?v=O6P86uwfdR0\n//for the hooks that are simple arrays\n\n//need a function component to use hook, classes use \"state\" instead\n//hooks need to execute in the same order, so we can't use if statements for them\n//usually we use a single hook per object in an array, but it really just depends on what you're doing\n// single hooks then let you do various different changes on a single/multiple event/s, making the data truely uniquely modifiable\nexport function HooksFunc() {\n  const [countState, setCountState] = useState(() => {\n    return 0;\n  });\n  //default value is placed in the useState brackets, it is an array\n  //can also use simple version such as \"useState(0);\" which can be slower in complicated states, and you can replace 0 with\n  // another function, which means that it will run that external function every time\n  //the expanded function version only runs once at the start, hence why it is used in complicated states\n\n  function increaseCount() {\n    //setCountState(countState + 1);\n    //this way shouldn't be used, as if it were to be repeated, it would use the old countState because the function\n    // hasn't finished, so the state doesn't appear changed. It would then be the same equation and answer\n\n    setCountState((oldCount) => oldCount + 1);\n    //this allows you to re-render the function, in the event you need to call the setCountState function again\n    //this uses the function method of setting state, similar to classes, as it passes in the state object as a number\n    // then updates it, so when the next setCountState tries to run, it uses the updated number\n  }\n\n  function decreaseCount() {\n    setCountState((oldCount) => oldCount - 1);\n  }\n\n  const [arrayState, setArrayState] = useState({ number: 12, letter: \"f\" });\n  const number = arrayState.number;\n  const letter = arrayState.letter;\n  //in this example, we are using an array of data, so the method to play with state will be different\n\n  function increaseNumber() {\n    setArrayState((oldArray) => {\n      return { number: oldArray.number + 1, letter: oldArray.letter };\n      //this returns an array, with the updated value of number, and does math by pulling the old value of number from the\n      // old array, then it proceeds to add \"1\" to it. Letter must be included, or it gets \"dropped\" from the state\n\n      //in function based components, we need to add letter. But in class based states, we don't need to include it\n      // as it only writes to the thing being modified. Class components get everything merged, functions just overwrite\n\n      //To overcome this, we can also \"spread\" out all of the code, which you can see in the decreaseNumber\n    });\n  }\n\n  function decreaseNumber() {\n    setArrayState((oldArray) => {\n      return { ...oldArray, number: oldArray.number - 1 };\n      //This spreads out all of the old array data to be written out to again, then modifies the value we explicitly supply\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={increaseCount}>Up</button>\n      <span className=\"counter\">{countState}</span>\n      <button onClick={decreaseCount}>Down</button>\n      <div className=\"spacer\">\n        <button onClick={increaseNumber}>Up Number</button>\n        <span className=\"counter\">\n          {number}, {letter}\n        </span>\n        <button onClick={decreaseNumber}>Down Number</button>\n      </div>\n    </div>\n  );\n}\n\n/// the below is where the modifiable useState stuff is done. It is independant of the stuff above\n/// this is really annoying to figure out\n/// it has some changes and explanations that were not in the videos, so it was a good learning exercise\n\nfunction ListItem({ item, index, modifyArray, deleteArray }) {\n  return (\n    <li\n      style={{ textDecoration: item.isModified ? \"line-through\" : \"\" }}\n      className=\"list-item\"\n    >\n      {item.text}\n      <button onClick={() => modifyArray(index)}>Modify</button>\n      <button onClick={() => deleteArray(index)}>Delete</button>\n    </li>\n  );\n  //text decoration is based on a ternary? statement, basically the syntax is \"if XYZ ? true=action : else=action\"\n  // in this specific case\n}\n\nfunction AddListItem({ addItem }) {\n  const [newItem, setNewItem] = useState(\"\");\n\n  const handleAdd = (e) => {\n    e.preventDefault();\n    if (!newItem) return;\n    addItem(newItem);\n    setNewItem(\"\");\n  };\n\n  return (\n    <form onSubmit={handleAdd}>\n      <input\n        type=\"text\"\n        value={newItem}\n        placeholder=\"add new item\"\n        onChange={(e) => setNewItem(e.target.value)}\n      ></input>\n    </form>\n  );\n}\n\nexport function HookComp() {\n  const [arrayList, setArrayList] = useState([\n    {\n      text: \"first item\",\n      isModified: false,\n    },\n    {\n      text: \"second item\",\n      isModified: true,\n    },\n    {\n      text: \"third item\",\n      isModified: false,\n    },\n  ]);\n\n  const addItem = (text) => {\n    const newValues = [...arrayList, { text }];\n    setArrayList(newValues);\n  };\n\n  const modifyArray = (index) => {\n    const newValues = [...arrayList];\n    //newValues[index].isModified = true;\n    //setArrayList(newValues);\n\n    //the commented out way would only work for strike-through, but the way below allows for undoing the change\n    if (newValues[index].isModified) {\n      return (newValues[index].isModified = false), setArrayList(newValues);\n    }\n    {\n      return (newValues[index].isModified = true), setArrayList(newValues);\n    }\n    //this if statement works by assessing if the isModified == true, then sets it to false, else it sets it true\n    //we need to call the setState function within the block otherwise it can't access the changed value\n  };\n\n  const deleteArray = (index) => {\n    ///const newValues = [...arrayList];\n    ///newValues.splice(index, 1);\n    //puts \"cursor\" at index, then splices 1 position. Look it up for more information if needed.\n\n    ///setArrayList(newValues);\n    // the triple slash comments are what was previously there, but the new filter method does not mutate the array\n\n    const deletedItem = Array.from(arrayList.filter((items, i) => i !== index));\n    //the filter can take in the callback function with the array (items) and the index (i), then we\n    // are checking if the index does not equal the index of the item we are deleting, so we can exclude\n    // it from the new array. After that, we set state equal to this new array (non-mutated)\n    setArrayList(deletedItem);\n  };\n\n  return (\n    <div className=\"comp-container\">\n      <div className=\"array-list\">\n        <ul>\n          {arrayList.map((item, index) => (\n            <ListItem\n              key={index}\n              index={index}\n              item={item}\n              modifyArray={modifyArray}\n              deleteArray={deleteArray}\n            />\n          ))}\n          <AddListItem addItem={addItem} />\n        </ul>\n      </div>\n    </div>\n  );\n}\n",["63","64"],"/home/joe/Documents/syrep Github/reactdemoapp/src/reportWebVitals.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/Redux.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/reducers/counter.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/reducers/combinedReducers.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/reducers/login.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/actions/counterAction.js",[],"/home/joe/Documents/syrep Github/reactdemoapp/src/reduxpart/actions/loginAction.js",[],{"ruleId":"65","severity":1,"message":"66","line":148,"column":51,"nodeType":"67","messageId":"68","endLine":148,"endColumn":52},{"ruleId":"69","severity":1,"message":"70","line":150,"column":5,"nodeType":"71","messageId":"72","endLine":152,"endColumn":6},{"ruleId":"65","severity":1,"message":"66","line":151,"column":50,"nodeType":"67","messageId":"68","endLine":151,"endColumn":51},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-global-assign","no-unsafe-negation"]